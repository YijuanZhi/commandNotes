* Git learning note   -------  Yijuan Zhi
  
** Git Command

*** basic setup
    
1. git --version >>> print out the version of my git
2. git config --global user.name "Yijuan Zhi" >>> set up my name
3. git config --global user.email "zjzyj520@gmail.com" >>> set up my email

*** git command

**** git basics
1. git init .      >>> Initialize empty Git repository
2. git status      >>> showing the stage for the time being, files added but not committed yet
3. git add file.f      >>> tracking the file(s), can add serveral files into one stage
4. git add .        >>> add all files into track list
5. git commit -m "note"      >>> commit file(s) and throw a message
6. git log       >>> showing the log of the file
7. git diff file.f       >>> showing the difference since last time modified
   --- git add file.f     git commit -m "note2"     >>>to commit the new version
8. git commit -am "note"     >>> commit all the files, then throw a message
9. 


**** git branch, merge and delete
1. git branch newBranch        >>> create a new branch
2. git branch        >>> showing us what branches we have and which one we are in
3. git checkout newBranch      >>>  switch to the branch newBranch
4. git checkout -b newBranch2        >>> create a branch newBranch2 and switch to it (newBranch2 is created base on the current branch, say it is newBranch)
5. git merge newBranch2       >>> merge newBranch2 into newBranch when are inside the branch newBranch
 (it also commit changes into the newBranch)
6. git branch -d newBranch2         >>>  delete the branch newBranch2

**** git flow
1. git flow init -d       >>> initialize git flow and use the default setting (create a branch develop and switch to it)
2. git flow feature start newfeature1      >>> create a branch feature/newfeature1 and switch to it
3. git flow feature finish newfeature1        >>> merge the feature/newfeature1 to develop and delete the branch (use 'i' to insert comments, 'esc' to exit insert mode, write ':wq' to finish commenting)
4. git flow feature publish new-feature       >>> push the feature/new-feature, if we don't have this branch in github, it's going to create the branch in github and our computer
5. git flow feature         >>> show the branches we have in feature
6. 
   
*** git to github
1. ssh-keygen -t rsa -C 'zjzyj520@gmail.com'     >>>create a key pair, and connect computer to github
2. cd ~/.ssh      >>> the folder we used to execute commands in github remotely
3. (in .ssh foler) cat id_rsa.pub      >>> get the key which is to verify your computer and your github account is the same person
4. (in the folder I want to upload to github) git remote add origin url       >>>  add the folder in the github folder
5. git remote -v       >>> showing the folder we have in github
6. git push origin master       >>> push the master branch content to master branch in github
7. git push origin develop       >>> push the develop branch content to develop branch in github
8. git flow feature publish new-feature       >>> push the feature/new-feature, if we don't have this branch in github, it's going to create the branch in github and our computera

**** synchronize files between computers
***** clone
- git clone url     >>> this is going to clone the target files into the directory that you are in
***** pull modified files back to another computer
- git pull origin master      >>> fetch and merge the files back into the computer
- this is a test, what is this change?
